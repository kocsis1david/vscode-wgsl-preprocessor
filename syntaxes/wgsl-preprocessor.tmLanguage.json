{
    "name": "wgsl-preprocessor",
    "scopeName": "source.wgsl-preprocessor",
	"injectionSelector": "L:source.wgsl",
    "patterns": [
        {
            "include": "source.wgsl"
        },
        {
            "include": "#preprocessors"
        }
    ],
    "repository": {
		"preprocessor_setting": {
			"match": "^\\s*(#\\s*(if|elif|undef|else|endif|pragma|line))\\b",
			"name": "keyword.control.preprocessor.glsl"
		},
		"preprocessor_include": {
			"match": "^\\s*(#\\s*(include|include_next|import|moj_import))\\s+(\"[^\\:*?\"<>|]*\"|<[^\\:*?\"<>|]*>)?",
			"captures": {
				"1": {
					"name": "keyword.control.import.glsl"
				},
				"3": {
					"name": "string.quoted.include.glsl"
				}
			}
		},
		"preprocessor_error": {
			"match": "^\\s*(#\\s*error)(\\s+[^\\n]+)?(?=\\n)",
			"captures": {
				"1": {
					"name": "keyword.control.preprocessor.glsl"
				},
				"2": {
					"name": "string.unquoted.error.glsl"
				}
			}
		},
		"preprocessor_define_function": {
			"begin": "^\\s*(#\\s*define)\\s+([a-zA-Z_][\\w]*)\\(",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.preprocessor.glsl"
				},
				"2": {
					"name": "entity.name.function.glsl"
				}
			},
			"patterns": [
				{
					"match": "\\b([a-zA-Z][\\w]*)\\b",
					"name": "variable.parameter.glsl"
				}
			]
		},
		"preprocessor_define_variable": {
			"match": "^\\s*(#\\s*define)(\\s+[a-zA-Z_][\\w]*)?",
			"captures": {
				"1": {
					"name": "keyword.control.preprocessor.glsl"
				},
				"2": {
					"name": "entity.name.function.glsl"
				}
			}
		},
		"preprocessor_define_setting": {
			"patterns": [
				{
					"begin": "^\\s*(#\\s*if|#\\s*elif)\\b",
					"end": "\\n",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.preprocessor.glsl"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"match": "\\b(\\!)?defined\\b",
							"name": "keyword.control.preprocessor.glsl"
						},
						{
							"match": "\\b[a-zA-Z_][\\w]*",
							"name": "entity.name.function.glsl"
						},
						{
							"include": "#expressions"
						}
					]
				},
				{
					"match": "^\\s*(#\\s*(ifdef|ifndef|if|elif)\\b)(\\s+[a-zA-Z_][\\w]*)?",
					"captures": {
						"1": {
							"name": "keyword.control.preprocessor.glsl"
						},
						"3": {
							"name": "entity.name.function.glsl"
						}
					}
				}
			]
		},
		"preprocessors": {
			"patterns": [
				{
					"include": "#preprocessor_define_function"
				},
				{
					"include": "#preprocessor_define_variable"
				},
				{
					"include": "#preprocessor_define_setting"
				},
				{
					"include": "#preprocessor_include"
				},
				{
					"include": "#preprocessor_error"
				},
				{
					"include": "#preprocessor_setting"
				}
			]
		}
    }
}